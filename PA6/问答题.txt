1.加性算法(additive)VS组合算法(compositional)，正向算法(forwards)VS逆算法(inverse)

2.用于满足半群约束要求（the semi-group requirement）。

3.forward方法对于输入图像进行参数化(包括仿射变换及放射增量).
backward方法同时输入图像参数和模板图像, 其中输入图像参数化仿射变换, 模板图像参数化仿射增量. 
因此backward方法的计算量显著降低，计算效率较高.。由于图像灰度值和运动参数非线性, 整个优化过程为非线性。
forward方法和backward方法选取了不同的代价函数和迭代方法，forward使用 I 计算delta P，backward方法中的使用 T计算delta P。

直接法是否可以类似光流，提出 inverse, compositional 的概念？它们有意义吗？
不能，静态的第一张图像无法提供相机的运动信息。

请思考上面算法哪些地方可以缓存或加速？
可以通过加一个合适的窗口来使计算加速

在上述过程中，我们实际假设了哪两个 patch 不变？
灰度不变假设，同窗口内深度不变假设

为何可以随机取点？而不用取角点或线上的点？那些不是角点的地方，投影算对了吗？
直接法优化的是灰度值优化，不是角点也没有关系

请总结直接法相对于特征点法的异同与优缺点。
相同点：同样是通过假设得出约束（灰度不变、不同图像上同一对特征点的相对位置不变）来得到一个表达式。
在假设严格成立且没有误差的情况下这个表达式应该是零。
然后高斯牛顿迭代来最小化这个表达式。
不同点：直接法没有找到特征点，更没有建立两张图片特征点之间的对应关系。